import type { SimpleObject } from '../types';
declare class Validator {
    errors: SimpleObject<any>;
    successful: boolean;
    processing: boolean;
    constructor(errors?: SimpleObject<any>);
    add(field: string, message: string, forceUpdate?: boolean): void;
    has(field: string | string[]): boolean;
    first(field: string | string[]): string | undefined;
    firstBy(obj: SimpleObject<any>, field?: string): string;
    missed(field: string | string[]): boolean;
    nullState(field: string | string[]): boolean | null;
    any(field?: string[], returnObject?: boolean): boolean | SimpleObject<any>;
    get(field: string): string | string[];
    all(): SimpleObject<any>;
    count(): number;
    fill(errors: SimpleObject<any>): void;
    flush(): void;
    clear(field?: string | string[]): void;
    isValid(): boolean;
    onKeydown(event: any, prefix?: string): void;
    fields(field: string | string[]): string[];
}
export type { Validator as ValidatorType };
declare const _default: Validator;
export default _default;
