/// <reference types="@types/qs" />
import type { SimpleObject } from '../types';
import type { AxiosInstance, Method, AxiosRequestConfig, AxiosResponse } from 'axios';
import type { IParseOptions } from 'qs';
export default class BaseService {
    readonly endpoint: string;
    parameters: SimpleObject<any>;
    errors: import("./Validator").ValidatorType;
    static $http: AxiosInstance;
    static $errorProperty: string;
    static $resetParameter?: boolean | undefined;
    static $parsedQs: IParseOptions;
    constructor(endpoint: string, parameters?: SimpleObject<any>);
    get $http(): AxiosInstance;
    get $errorProperty(): string;
    get $resetParameter(): boolean | undefined;
    get $parsedQs(): IParseOptions;
    all<T = any>(): Promise<T>;
    find<T = any>(id: number | string): Promise<T>;
    post<T = any>(payload: any, config?: AxiosRequestConfig): Promise<T>;
    store<T = any>(payload: any, config?: AxiosRequestConfig): Promise<T>;
    put<T = any>(id: any, payload?: any, config?: AxiosRequestConfig): Promise<T>;
    patch<T = any>(id: any, payload?: any, config?: AxiosRequestConfig): Promise<T>;
    update<T = any>(id: string | number, payload: any): Promise<T>;
    delete<T = any>(id: string | number): Promise<T>;
    remove<T = any>(id: string | number): Promise<T>;
    $submit<T = any, F = any>(method: Method, param?: string | number, form?: F, config?: AxiosRequestConfig): Promise<AxiosResponse<T, any>>;
    submit<T = any, F = any>(method: Method, url?: string | number, form?: F, config?: AxiosRequestConfig): Promise<T>;
    private __getParameterString;
    setParameters(parameters: SimpleObject<any>): this;
    setParameter(parameter: string, value?: any): this;
    removeParameters(parameters?: string[]): this;
    removeParameter(parameter: string): this;
    onFail(errors: SimpleObject<any>): void;
    beforeSubmit(): void;
    onSuccess(): void;
}
