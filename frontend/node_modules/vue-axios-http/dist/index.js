"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseService = exports.Validator = void 0;
const lodash_1 = require("lodash");
const BaseService_1 = __importDefault(require("./core/BaseService"));
exports.BaseService = BaseService_1.default;
const Validator_1 = __importDefault(require("./core/Validator"));
exports.Validator = Validator_1.default;
// augment typings of Vue.js
require("./vue");
const optionDefault = {
    resetParameter: false,
    parsedQs: {
        comma: true,
        allowDots: true,
        ignoreQueryPrefix: true,
    },
    errorProperty: 'errors',
};
class AxiosHttp {
    constructor() {
        this.installed = false;
    }
    install(Vue, options = {}) {
        if (this.installed)
            return;
        this.installed = true;
        const { errorProperty, parsedQs, resetParameter } = (0, lodash_1.merge)(optionDefault, options);
        BaseService_1.default.$parsedQs = parsedQs;
        BaseService_1.default.$resetParameter = resetParameter;
        BaseService_1.default.$errorProperty = errorProperty || 'errors';
        Vue.mixin({
            beforeCreate() {
                this.$options.$errors = {};
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                Vue.util.defineReactive(this.$options, '$errors', Validator_1.default);
                if (!this.$options.computed)
                    this.$options.computed = {};
                this.$options.computed.$errors = function () {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    return this.$options.$errors;
                };
            },
        });
    }
}
__exportStar(require("./util"), exports);
exports.default = new AxiosHttp();
