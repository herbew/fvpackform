"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasFiles = exports.hasFilesDeep = exports.objectToFormData = void 0;
const objects_1 = require("./objects");
function objectToFormData(obj, formData = new FormData(), parent = '') {
    if (obj == null || (Array.isArray(obj) && obj.length === 0)) {
        formData.append(parent, obj);
    }
    else {
        const propertyMap = new Map(Object.entries(obj));
        for (const [property, value] of propertyMap) {
            const key = parent ? `${parent}[${property}]` : property;
            appendToFormData(formData, key, value);
        }
    }
    return formData;
}
exports.objectToFormData = objectToFormData;
function appendToFormData(formData, key, value) {
    if (value instanceof Date)
        return formData.append(key, value.toISOString());
    if (value instanceof File)
        return formData.append(key, value, value.name);
    if (typeof value === 'boolean')
        return formData.append(key, value ? '1' : '0');
    if (value === null)
        return formData.append(key, '');
    if (typeof value !== 'object')
        return formData.append(key, value);
    if (Array.isArray(value) && hasFilesDeep(value)) {
        for (let i = 0; i < value.length; i++) {
            formData.append(key + '[' + i + ']', value[i], value[i].name);
        }
        return formData;
    }
    objectToFormData(value, formData, key);
}
function hasFilesDeep(obj) {
    if (!obj)
        return false;
    if (typeof obj === 'object') {
        const objValues = Object.values(obj);
        if (objValues.some(objects_1.isFile))
            return true;
    }
    if (Array.isArray(obj)) {
        const nonNullElement = obj.find((el) => el !== null);
        if (nonNullElement) {
            return hasFilesDeep(nonNullElement);
        }
    }
    return (0, objects_1.isFile)(obj);
}
exports.hasFilesDeep = hasFilesDeep;
function hasFiles(form) {
    for (const prop in form) {
        if (Object.prototype.hasOwnProperty.call(form, prop) && hasFilesDeep(form[prop])) {
            return true;
        }
    }
    return false;
}
exports.hasFiles = hasFiles;
